security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    # Role hierarchy: admins inherit librarian permissions
    role_hierarchy:
        ROLE_ADMIN: [ROLE_LIBRARIAN]
        ROLE_LIBRARIAN: [ROLE_USER]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\FormLoginAuthenticator
            custom_authenticator: App\Security\FormLoginAuthenticator
            access_denied_handler: App\Security\AccessDeniedHandler
            logout:
                path: app_logout
                target: app_login
                csrf_parameter: _csrf_token
                csrf_token_id: logout
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week
                path: /

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Public access routes
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/logout, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/debug-users, roles: PUBLIC_ACCESS }

        # Management routes - restricted to librarians and admins
        - { path: ^/category, roles: ROLE_LIBRARIAN }
        - { path: ^/author, roles: ROLE_LIBRARIAN }
        - { path: ^/theme, roles: ROLE_LIBRARIAN }
        - { path: ^/language, roles: ROLE_LIBRARIAN }
        - { path: ^/user, roles: ROLE_LIBRARIAN }

        # All other routes require at least user role
        - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
